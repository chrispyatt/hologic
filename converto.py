

import argparse
import pydicom
import os
import numpy

# this line assigns the arguments given at command line to variables that can be used within the script (the first is the name of the script itself)
parser = argparse.ArgumentParser(description='This script takes a Hologic image file and a binary dump of the private data from that image (generated by separate script). It then outputs a new image with the private data appropriately integrated.')
parser.add_argument('infile',
                    help='The Hologic image file to be processed.')
parser.add_argument('pvt_dump',
                    help='The private data dump.')
parser.add_argument('outfile',
                    help='Desired output filename.')


args = parser.parse_args()
infile = args.infile
pvt_dump = args.pvt_dump
outfile = args.outfile
#outputDirectory = args.outputDirectory


print('reading input file')
ds = pydicom.read_file(infile)

new_dict_entries = {
    0x7E011001 : ('LO', 'CodecVersion', '1', 'HologicTomoSc'),
    0x7E011002 : ('SH', 'CodecContentType', '1', 'HologicTomoSc'),
    0x7E011010 : ('SQ', 'HighResolutionDataSequence', '1', 'HologicTomoSc'),
    0x7E011011 : ('SQ', 'LowResolutionDataSequence', '1', 'HologicTomoSc'),
    0x7E011012 : ('OB', 'CodecContent', '1', 'HologicTomoSc'),
}


# check values (sanity check)
# print rows/columns from x00 and from dcm dump of file
pass

# make new dicom file
print('making new dataset')
ds2 = pydicom.Dataset()

# copy across existing attributes (but not private elements)
print('getting non-private elements')


# set frame count, columns etc in new dicom file (take from igh res sequence)
print('getting private info')
with open(pvt_dump, "rb") as fh:
    data = fh.read()

#print('frame count')
fcount = int.from_bytes(data[20:22],"little")
ds2[0x0028,0x0008] = pydicom.DataElement((0x0028,0x0008), 'US', fcount)

#print('columns')
cols = int.from_bytes(data[24:26],"little")
ds2[0x0028,0x0011] = pydicom.DataElement((0x0028,0x0011), 'US', cols)


#print('rows')
rows = int.from_bytes(data[28:30],"little")
ds2[0x0028,0x0010] = pydicom.DataElement((0x0028,0x0010), 'US', rows)


#print('bits stored')
bits = int.from_bytes(data[32:33],"little")
ds2[0x0028,0x0101] = pydicom.DataElement((0x0028,0x0101), 'US', bits)
ds2[0x0028,0x0102] = pydicom.DataElement((0x0028,0x0102), 'US', bits-1)


#misc values
ds2[0x0028,0x0100] = pydicom.DataElement((0x0028,0x0100), 'US', '16')
ds2[0x0028,0x0004] = pydicom.DataElement((0x0028,0x0004), 'CS', 'MONOCHROME2')
ds2[0x0002,0x0010] = pydicom.DataElement((0x0002,0x0010), 'UI', '1.2.840.10008.1.2.4.81')

# make jpeg-ls header

header = [0xFF, 0xD8, 0xFF, 0xF7, 0x00, 0x0B, bits, rows, cols, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, data[36], 0x00, 0x00]

# get frame positions from high res sequence
frames = []
for i in range(-1024,0,4):
    frame_pos = int.from_bytes(data[i:i+4],"little")
    frames.append(frame_pos)


# get each frame, one by one & add jpeg header (to each frame??)
# also add end of image marker to each one
    
# Pixel Data tag is 7FE0,0010
pixel_data = []

# Insert frame position (offset table) into pixel data element
for i in frames:
    pixel_data.append(i)


# Insert data for each frame with jpeg-ls header
# save pixel data via array
for i in range(0,fcount):
    frame_start = frames[i]
    frame_end = frames[i+1]-1
    # Append header
    for j in header:
        pixel_data.append(j)
    # Append pixel data
    for k in data[frame_start:frame_end]:
        pixel_data.append(k)
    # If frame length is odd - append 00 byte.
    if (frame_end-frame_start)%2>0:
        pixel_data.append(0x00)
        pixel_data.append(0x00)
    # Append EOI marker
    pixel_data.append(0xFF)
    pixel_data.append(0xD9)


# convert pixel_data to numpy.ndarray
pix_arr = numpy.array(pixel_data)
# save into new dicom file
ds2.PixelData = pix_arr.tobytes()


# set littleEndian & VR options
ds2.is_little_endian = False
ds2.is_implicit_VR = False


# write output to file
ds2.save_as(outfile)


# profit


